 ### Sping IOC , 此Demo 基于上一个 Spring_v1 删除模拟的 factory, 导入 Maven 使用 5.0.2坐标
 故需要先删除包"factory", 采用 new 方法.(体现 Spring 解耦嘛)

 配置 bean.xml 中的  accountService accountDao

运行,结果输出 : " com.yydcyy.service.impl.AccountServiceImpl@1bce4f0a
          com.yydcyy.dao.impl.AccountDaoImpl@5e3a8624
          保存了账户
          1 "  说明初始化环境正确

 ## ApplicationContext的三个常用实现类：  [详见 ui/Client.java 类]
     *      ClassPathXmlApplicationContext：它可以加载类路径下的配置文件，要求配置文件必须在类路径下。不在的话，加载不了。(更常用)
     *      FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件(必须有访问权限 Windows / mac 可能就没有访问权限
     *      AnnotationConfigApplicationContext：下次详解
          *  BeanFactory:            多例对象使用

## 核心容器的两个接口引发出的问题： [可 sout 输出,debug 单步调试看哪一步打印]
          *  ApplicationContext:     单例对象适用              采用此接口
          *      它在构建核心容器时，创建对象采取的策略是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。
          *
          *      它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。


## bean.xml 中三种加载方式 Demo 详见 bean.xml 注释
            第一种 使用默认构造函数创建  <bean id="accountService" class="com.yydcyy.service.impl.AccountServiceImpl" />

            第二种方式： 使用普通工厂中的方法创建对象（使用jar 包中方法 / 某个类中的方法创建对象，并存入spring容器）
            <bean id="instanceFactory" class="com.yydcyy.factory.InstanceFactory"></bean>
                <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>

            第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)
            <bean id="accountService" class="com.yydcyy.factory.StaticFactory" factory-method="getAccountService"/>

## bean的作用范围调整
                <bean id="accountService" class="com.yydcyy.service.impl.AccountServiceImpl"
                          scope="prototype" init-method="init" destroy-method="destroy"/>
                          生命周期 :
                          单例对象
                                              出生：当容器创建时对象出生
                                              活着：只要容器还在，对象一直活着
                                              死亡：容器销毁，对象消亡
                                              总结：单例对象的生命周期和容器相同
                                          多例对象
                                              出生：当我们使用对象时spring框架为我们创建
                                              活着：对象只要是在使用过程中就一直活着。
                                              死亡：看到的是: 一直活着.  [其实是当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收]
                                      singleton  prototype 由 Spring 自己判断
                {  所谓出生 : 及执行 service 层中 空参构造方法.  ( public AccountServiceImpl() {)
                所谓死亡, 即执行 service 层中 destory()方法  }
